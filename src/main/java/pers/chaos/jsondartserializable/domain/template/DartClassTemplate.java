package pers.chaos.jsondartserializable.domain.template;

import pers.chaos.jsondartserializable.domain.enums.DartConst;

import java.util.Arrays;
import java.util.List;

public final class DartClassTemplate {
    interface Header {
        List<String> generatedFileHeaders = Arrays.asList(
                "/// Generated by json-dart-serializable plugin.\n",
                "/// When some incorrect data generated, please fix it.\n",
                "/// Finally, run flutter build_runner auto generate *.g.dart file.\n"
        );
        String jsonSerializablePackAnno = "@JsonSerializable()\n";
        String jsonSerializablePack = "import 'package:json_annotation/json_annotation.dart';\n";
        String importClass = "import '%s';\n";
        String gFileImport = "part '%s.g.dart';\n\n";
        String remark = "/// %s\n";
    }

    public static String formatImportClass(String filename) {
        return String.format(Header.importClass, filename + DartConst.File.suffix);
    }

    public static String formatFileHeader() {
        StringBuilder sb = new StringBuilder();
        sb.append(Header.generatedFileHeaders.get(0));
        sb.append(Header.generatedFileHeaders.get(1));
        sb.append(Header.generatedFileHeaders.get(2));
        sb.append(Header.jsonSerializablePack);
        return sb.toString();
    }

    public static String formatImportDartPart(String filename) {
        return String.format(Header.gFileImport, filename);
    }

    public static String formatHeaderRemark(String remark) {
        return String.format(Header.remark, remark);
    }

    public static String formatJsonSerializablePackAnno() {
        return Header.jsonSerializablePackAnno;
    }

    interface Body {
        String className = "class %s {\n";
        String fieldRemark = "    /// %s\n";
        String fieldJsonKey = "    @JsonKey(name: '%s')\n";
        String field = "    %s %s;\n\n";
        String constructor = "    /// Constructor...\n    %s(%s);\n\n";
        String requiredConstructorPart = "required this.%s, ";
        String requiredConstructorWithDefaultValPart = "required this.%s = %s, ";
        String constructorOnlyDefaultValPart = "this.%s = %s, ";
        String constructorNullablePart = "this.%s, ";
        String fromJson = "    /// Deserializer...\n    factory %s.fromJson(Map<String, dynamic> json) => _$%sFromJson(json);\n\n";
        String toJson = "    /// Serializer...\n    Map<String, dynamic> toJson() => _$%sToJson(this);\n";
        String classEOF = "}";
    }

    public static String formatFiledRemark(String remark) {
        return String.format(Body.fieldRemark, remark);
    }

    public static String formatJsonKeyAnno(String jsonFiledName) {
        return String.format(Body.fieldJsonKey, jsonFiledName);
    }

    public static String formatField(String dartDataTypeStr, String propertyName) {
        return String.format(Body.field, dartDataTypeStr, propertyName);
    }

    public static String formatRequiredConstructorWithDefaultVal(String propertyName, Object defaultValueStr) {
        return String.format(Body.requiredConstructorWithDefaultValPart, propertyName, defaultValueStr);
    }

    public static String formatRequiredConstructor(String propertyName) {
        return String.format(Body.requiredConstructorPart, propertyName);
    }

    public static String formatConstructorOnlyDefaultValue(String propertyName, Object defaultValueStr) {
        return String.format(Body.constructorOnlyDefaultValPart, propertyName, defaultValueStr);
    }

    public static String formatConstructorNullable(String propertyName) {
        return String.format(Body.constructorNullablePart, propertyName);
    }

    public static String formatClassName(String className) {
        return String.format(Body.className, className);
    }

    public static String formatConstructor(String className, String params) {
        return String.format(Body.constructor, className, params);
    }

    public static String formatFromJson(String className) {
        return String.format(Body.fromJson, className, className);
    }

    public static String formatToJson(String className) {
        return String.format(Body.toJson, className);
    }

    public static String formatEOF() {
        return Body.classEOF;
    }
}
